private String rewriteQuery(String queryStr) {
    List<String> tokens = new ArrayList<>();
    StringBuilder token = new StringBuilder();

    for (int i = 0; i < queryStr.length(); i++) {
        char c = queryStr.charAt(i);
        if (Character.isWhitespace(c)) {
            if (token.length() > 0) {
                tokens.add(token.toString());
                token.setLength(0);
            }
        } else {
            token.append(c);
        }
    }
    if (token.length() > 0) {
        tokens.add(token.toString());
    }

    System.out.println("‚ñ∂Ô∏è –¢–æ–∫–µ–Ω—ã –∏–∑ –∑–∞–ø—Ä–æ—Å–∞: " + tokens);

    StringBuilder newQuery = new StringBuilder();
    boolean synonymFound = false;

    for (int i = 0; i < tokens.size(); i++) {
        String term = tokens.get(i);
        String lowerTerm = term.toLowerCase();
        String canonical = termToCanonical.get(lowerTerm);

        System.out.println("\nüîπ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω: \"" + term + "\"");
        if (canonical != null) {
            System.out.println("   ‚§∑ –ù–∞–π–¥–µ–Ω–∞ –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∞—è —Ñ–æ—Ä–º–∞: " + canonical);
            List<String> group = canonicalToGroup.get(canonical);
            if (group != null) {
                System.out.println("   ‚§∑ –ì—Ä—É–ø–ø–∞ —Å–∏–Ω–æ–Ω–∏–º–æ–≤: " + group);
                synonymFound = true;
                newQuery.append("(");
                for (int j = 0; j < group.size(); j++) {
                    String syn = group.get(j);
                    newQuery.append(syn);
                    if (j < group.size() - 1) {
                        newQuery.append(" OR ");
                    }
                }
                newQuery.append(")");
            } else {
                System.out.println("   ‚§∑ ‚ö†Ô∏è –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤—Å—Ç–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ");
                newQuery.append(term);
            }
        } else {
            System.out.println("   ‚§∑ ‚ùå –ö–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∞—è —Ñ–æ—Ä–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å");
            newQuery.append(term);
        }

        if (i < tokens.size() - 1) {
            newQuery.append(" ");
        }
    }

    String finalQuery = synonymFound ? "(" + newQuery.toString() + ")" : queryStr;
    System.out.println("\n‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å: " + finalQuery);
    return finalQuery;
}
